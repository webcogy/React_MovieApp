{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synoposis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","useState","movies","setMovies","loading","setLoading","error","setError","getMovies","a","axios","get","response","data","console","log","useEffect","movie","medium_cover_image","synopsis","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA+BA,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAC7B,OACE,mCACE,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,oBAKxD,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACpB,OACE,mCACE,sBAAMF,UAAU,eAAhB,SAAgCE,MAKvBC,MA3Cf,YAAsD,IAArCJ,EAAoC,EAApCA,MAAOH,EAA6B,EAA7BA,OAAQQ,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACtC,OACE,sBAAKL,UAAU,QAAf,UACE,qBAAKA,UAAU,iBAAf,SACGJ,GAAU,cAACD,EAAD,CAAaC,OAAQA,MAElC,sBAAKI,UAAU,iBAAf,UACE,6BAAKD,IACL,qBAAKC,UAAU,gBAAf,SACGI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OACV,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAGnC,qBAAKP,UAAU,kBAAf,SACE,cAAC,IAAD,CACEQ,KAAMH,EACNI,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,qB,yBCwBLC,MA1Cf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,mBAAS,MAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKPC,EAAS,uCAAG,4BAAAC,EAAA,sEAEdJ,GAAW,GAFG,SAGSK,IAAMC,IAC3B,yDAJY,OAGRC,EAHQ,OAMdT,EAAUS,EAASC,KAAKA,KAAKX,QAC7BY,QAAQC,IAAIH,EAASC,KAAKA,KAAKX,QAPjB,gDASdK,EAAS,EAAD,IATM,QAWhBF,GAAW,GAXK,yDAAH,qDAkBf,OAJAW,qBAAU,WACRR,MACC,IAECJ,EAAgB,qBAAKjB,UAAU,MAAf,mCAChBmB,EAAc,0FACbJ,EAGH,qBAAKf,UAAWe,EAAS,MAAQ,eAAjC,SACGA,EAAOT,KAAI,SAACwB,GAAD,OACV,cAAC,EAAD,CACE/B,MAAO+B,EAAM/B,MACbH,OAAQkC,EAAMC,mBAEd3B,OAAQ0B,EAAM1B,OACdC,UAAWyB,EAAME,UAFZF,EAAMG,SARC,MClBPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.61ae036d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie({ title, poster, genres, synoposis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Columns\">\r\n        {poster && <MoviePoster poster={poster} />}\r\n      </div>\r\n      <div className=\"Movie__Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synoposis}\r\n            maxLine=\"3\"\r\n            ellipsis=\" ...\"\r\n            trimRight\r\n            basedOn=\"letters\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n  return (\r\n    <>\r\n      <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return (\r\n    <>\r\n      <span className=\"Movie__Genre\">{genre}</span>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React, { useState, useEffect } from 'react';\nimport Movie from './Movie';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const getMovies = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(\n        'https://yts.mx/api/v2/list_movies.json?srot_by=rating',\n      );\n      setMovies(response.data.data.movies);\n      console.log(response.data.data.movies);\n    } catch (e) {\n      setError(e);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  if (loading) return <div className=\"App\">로딩중...</div>;\n  if (error) return <div>에러가 발생했습니다</div>;\n  if (!movies) return null;\n\n  return (\n    <div className={movies ? 'App' : 'App--loading'}>\n      {movies.map((movie) => (\n        <Movie\n          title={movie.title}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synoposis={movie.synopsis}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}